import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, MediaGroup

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–¥–µ—Å—å
API_TOKEN = '8039553499:AAHonILU7zeqifS7qc631xwche7UHMeVq4w'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    telegram_id INTEGER PRIMARY KEY,
    profile_name TEXT,
    user_group TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS works (
    work_id INTEGER PRIMARY KEY AUTOINCREMENT,
    patient_name TEXT,
    patient_phone TEXT,
    work_type TEXT,
    work_name TEXT,
    deadline TEXT,
    cost TEXT,
    status TEXT,
    dentist_id INTEGER,
    technician_id INTEGER
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS photos (
    photo_id INTEGER PRIMARY KEY AUTOINCREMENT,
    work_id INTEGER,
    file_id TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS videos (
    video_id INTEGER PRIMARY KEY AUTOINCREMENT,
    work_id INTEGER,
    file_id TEXT
)
''')
conn.commit()

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class Registration(StatesGroup):
    group = State()
    profile_name = State()

class NewWork(StatesGroup):
    patient_name = State()
    patient_phone = State()
    work_type = State()
    work_name = State()
    deadline = State()
    cost = State()
    photos = State()
    videos = State()
    technician = State()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_registered(user_id):
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
    return cursor.fetchone() is not None

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_group(user_id):
    cursor.execute("SELECT user_group FROM users WHERE telegram_id = ?", (user_id,))
    return cursor.fetchone()[0]

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_name(user_id):
    cursor.execute("SELECT profile_name FROM users WHERE telegram_id = ?", (user_id,))
    return cursor.fetchone()[0]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if not is_registered(user_id):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ ü¶∑"))
        keyboard.add(KeyboardButton("–¢–µ—Ö–Ω–∏–∫ üîß"))
        await message.reply("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", parse_mode="HTML", reply_markup=keyboard)
        await Registration.group.set()
    else:
        group = get_user_group(user_id)
        if group == 'dentist':
            await show_dentist_menu(message)
        elif group == 'technician':
            await show_technician_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=Registration.group)
async def process_group(message: types.Message, state: FSMContext):
    if message.text not in ["–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ ü¶∑", "–¢–µ—Ö–Ω–∏–∫ üîß"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return
    group = 'dentist' if message.text == "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ ü¶∑" else 'technician'
    async with state.proxy() as data:
        data['group'] = group
    await Registration.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(state=Registration.profile_name)
async def process_profile_name(message: types.Message, state: FSMContext):
    profile_name = message.text
    user_id = message.from_user.id
    async with state.proxy() as data:
        group = data['group']
    cursor.execute("INSERT INTO users (telegram_id, profile_name, user_group) VALUES (?, ?, ?)", (user_id, profile_name, group))
    conn.commit()
    await message.reply(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {group} —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è: <b>{profile_name}</b>.", parse_mode="HTML")
    await state.finish()
    if group == 'dentist':
        await show_dentist_menu(message)
    else:
        await show_technician_menu(message)

# –ú–µ–Ω—é —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞
async def show_dentist_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É üì§"))
    keyboard.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç üìã"))
    keyboard.add(KeyboardButton("–ê—Ä—Ö–∏–≤ —Ä–∞–±–æ—Ç üóÑÔ∏è"))
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", parse_mode="HTML", reply_markup=keyboard)

# –ú–µ–Ω—é —Ç–µ—Ö–Ω–∏–∫–∞
async def show_technician_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã üìã"))
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É"
@dp.message_handler(Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É üì§"), state='*')
async def start_new_work(message: types.Message):
    if get_user_group(message.from_user.id) != 'dentist':
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞–º.")
        return
    await NewWork.patient_name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:")

# FSM: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
@dp.message_handler(state=NewWork.patient_name)
async def process_patient_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['patient_name'] = message.text
    await NewWork.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞:")

@dp.message_handler(state=NewWork.patient_phone)
async def process_patient_phone(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return
    async with state.proxy() as data:
        data['patient_phone'] = message.text
    await NewWork.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:")

@dp.message_handler(state=NewWork.work_type)
async def process_work_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['work_type'] = message.text
    await NewWork.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:")

@dp.message_handler(state=NewWork.work_name)
async def process_work_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['work_name'] = message.text
    await NewWork.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏:")

@dp.message_handler(state=NewWork.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deadline'] = message.text
    await NewWork.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message_handler(state=NewWork.cost)
async def process_cost(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return
    async with state.proxy() as data:
        data['cost'] = message.text
        data['photos'] = []
        data['videos'] = []
    await NewWork.next()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üì∏"))
    keyboard.add(KeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=NewWork.photos)
async def process_photos(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photos'].append(message.photo[-1].file_id)
    await message.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

@dp.message_handler(Text(equals="–ì–æ—Ç–æ–≤–æ ‚úÖ"), state=NewWork.photos)
async def finish_photos(message: types.Message, state: FSMContext):
    await NewWork.next()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üìπ"))
    keyboard.add(KeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω—É–∂–Ω—ã.", reply_markup=keyboard)

@dp.message_handler(Text(equals="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üì∏"), state=NewWork.photos)
async def skip_photos(message: types.Message, state: FSMContext):
    await NewWork.next()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üìπ"))
    keyboard.add(KeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω—É–∂–Ω—ã.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
@dp.message_handler(content_types=['video'], state=NewWork.videos)
async def process_videos(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['videos'].append(message.video.file_id)
    await message.reply("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

@dp.message_handler(Text(equals="–ì–æ—Ç–æ–≤–æ ‚úÖ"), state=NewWork.videos)
async def finish_videos(message: types.Message, state: FSMContext):
    await NewWork.next()
    await show_technicians(message, state)

@dp.message_handler(Text(equals="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üìπ"), state=NewWork.videos)
async def skip_videos(message: types.Message, state: FSMContext):
    await NewWork.next()
    await show_technicians(message, state)

# –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∞
async def show_technicians(message: types.Message, state: FSMContext):
    cursor.execute("SELECT telegram_id, profile_name FROM users WHERE user_group = 'technician'")
    technicians = cursor.fetchall()
    if not technicians:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤.")
        await state.finish()
        return
    keyboard = InlineKeyboardMarkup()
    for tech_id, tech_name in technicians:
        keyboard.add(InlineKeyboardButton(tech_name, callback_data=f"tech_{tech_id}"))
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∞:</b>", parse_mode="HTML", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('tech_'), state=NewWork.technician)
async def process_technician(callback_query: types.CallbackQuery, state: FSMContext):
    tech_id = int(callback_query.data.split('_')[1])
    async with state.proxy() as data:
        cursor.execute('''
        INSERT INTO works (patient_name, patient_phone, work_type, work_name, deadline, cost, status, dentist_id, technician_id)
        VALUES (?, ?, ?, ?, ?, ?, 'active', ?, ?)
        ''', (data['patient_name'], data['patient_phone'], data['work_type'], data['work_name'], data['deadline'], data['cost'], callback_query.from_user.id, tech_id))
        work_id = cursor.lastrowid
        for photo in data['photos']:
            cursor.execute("INSERT INTO photos (work_id, file_id) VALUES (?, ?)", (work_id, photo))
        for video in data['videos']:
            cursor.execute("INSERT INTO videos (work_id, file_id) VALUES (?, ?)", (work_id, video))
        conn.commit()
        await notify_technician(tech_id, work_id, data)
    await callback_query.message.reply(f"–†–∞–±–æ—Ç–∞ –¥–ª—è <b>{data['patient_name']}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É.", parse_mode="HTML")
    await state.finish()
    await show_dentist_menu(callback_query.message)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∞
async def notify_technician(tech_id, work_id, data):
    message = f"<b>–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {data['patient_name']} (ID: {work_id})</b>:\n"
    message += f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
    message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['work_name']}\n"
    message += f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {data['deadline']}\n"
    await bot.send_message(tech_id, message, parse_mode="HTML")
    if data['photos'] or data['videos']:
        media = types.MediaGroup()
        for photo in data['photos']:
            media.attach_photo(photo)
        for video in data['videos']:
            media.attach_video(video)
        await bot.send_media_group(tech_id, media)

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç (—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥)
@dp.message_handler(Text(equals="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç üìã"), state='*')
async def list_active_works_dentist(message: types.Message):
    if get_user_group(message.from_user.id) != 'dentist':
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞–º.")
        return
    cursor.execute("SELECT work_id, patient_name FROM works WHERE dentist_id = ? AND status = 'active'", (message.from_user.id,))
    works = cursor.fetchall()
    if not works:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
        return
    keyboard = InlineKeyboardMarkup()
    for work_id, patient_name in works:
        keyboard.add(InlineKeyboardButton(f"–†–∞–±–æ—Ç–∞ –¥–ª—è {patient_name}", callback_data=f"work_{work_id}"))
    await message.reply("<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b>", parse_mode="HTML", reply_markup=keyboard)

# –ê—Ä—Ö–∏–≤ —Ä–∞–±–æ—Ç (—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥)
@dp.message_handler(Text(equals="–ê—Ä—Ö–∏–≤ —Ä–∞–±–æ—Ç üóÑÔ∏è"), state='*')
async def list_archive_works_dentist(message: types.Message):
    if get_user_group(message.from_user.id) != 'dentist':
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞–º.")
        return
    cursor.execute("SELECT work_id, patient_name FROM works WHERE dentist_id = ? AND status = 'archive'", (message.from_user.id,))
    works = cursor.fetchall()
    if not works:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
        return
    keyboard = InlineKeyboardMarkup()
    for work_id, patient_name in works:
        keyboard.add(InlineKeyboardButton(f"–†–∞–±–æ—Ç–∞ –¥–ª—è {patient_name}", callback_data=f"work_{work_id}"))
    await message.reply("<b>–í–∞—à–∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b>", parse_mode="HTML", reply_markup=keyboard)

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã (—Ç–µ—Ö–Ω–∏–∫)
@dp.message_handler(Text(equals="–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã üìã"), state='*')
async def list_active_works_technician(message: types.Message):
    if get_user_group(message.from_user.id) != 'technician':
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫–∞–º.")
        return
    cursor.execute("""
    SELECT DISTINCT u.profile_name, u.telegram_id
    FROM users u
    JOIN works w ON u.telegram_id = w.dentist_id
    WHERE w.technician_id = ? AND w.status = 'active'
    """, (message.from_user.id,))
    dentists = cursor.fetchall()
    if not dentists:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
        return
    keyboard = InlineKeyboardMarkup()
    for dentist_name, dentist_id in dentists:
        keyboard.add(InlineKeyboardButton(dentist_name, callback_data=f"dentist_{dentist_id}"))
    await message.reply("<b>–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏:</b>", parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('dentist_'))
async def list_works_by_dentist(callback_query: types.CallbackQuery):
    dentist_id = int(callback_query.data.split('_')[1])
    technician_id = callback_query.from_user.id
    cursor.execute("SELECT work_id, patient_name FROM works WHERE dentist_id = ? AND technician_id = ? AND status = 'active'", (dentist_id, technician_id))
    works = cursor.fetchall()
    if not works:
        await callback_query.message.reply("–£ —ç—Ç–æ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è –≤–∞—Å.")
        return
    keyboard = InlineKeyboardMarkup()
    for work_id, patient_name in works:
        keyboard.add(InlineKeyboardButton(f"–†–∞–±–æ—Ç–∞ –¥–ª—è {patient_name}", callback_data=f"work_{work_id}"))
    await callback_query.message.reply(f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ—Ç {get_profile_name(dentist_id)}:</b>", parse_mode="HTML", reply_markup=keyboard)

# –î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('work_'))
async def show_work_details(callback_query: types.CallbackQuery):
    work_id = int(callback_query.data.split('_')[1])
    cursor.execute("SELECT * FROM works WHERE work_id = ?", (work_id,))
    work = cursor.fetchone()
    if not work:
        await callback_query.message.reply("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_group = get_user_group(callback_query.from_user.id)
    message = f"<b>–†–∞–±–æ—Ç–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {work[1]} (ID: {work[0]})</b>\n"
    if user_group == 'dentist':
        message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {work[2]}\n"
    message += f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work[3]}\n"
    message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {work[4]}\n"
    message += f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {work[5]}\n"
    if user_group == 'dentist':
        message += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {work[6]} —Ä—É–±.\n"
    message += f"–°—Ç–∞—Ç—É—Å: {work[7]}\n"
    cursor.execute("SELECT profile_name FROM users WHERE telegram_id = ?", (work[8],))
    dentist_name = cursor.fetchone()[0]
    message += f"–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥: {dentist_name}\n"
    await bot.send_message(callback_query.from_user.id, message, parse_mode="HTML")
    cursor.execute("SELECT file_id FROM photos WHERE work_id = ?", (work_id,))
    photos = cursor.fetchall()
    cursor.execute("SELECT file_id FROM videos WHERE work_id = ?", (work_id,))
    videos = cursor.fetchall()
    if photos or videos:
        media = types.MediaGroup()
        for photo in photos:
            media.attach_photo(photo[0])
        for video in videos:
            media.attach_video(video[0])
        await bot.send_media_group(callback_query.from_user.id, media)
    if user_group == 'technician' and work[7] == 'active':
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data=f"done_{work_id}"))
        keyboard.add(InlineKeyboardButton("–ó–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚è≥", callback_data=f"delay_{work_id}"))
        await bot.send_message(callback_query.from_user.id, "<b>–î–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–±–æ—Ç–æ–π:</b>", parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ì–æ—Ç–æ–≤–æ"
@dp.callback_query_handler(lambda c: c.data.startswith('done_'))
async def mark_work_done(callback_query: types.CallbackQuery):
    work_id = int(callback_query.data.split('_')[1])
    cursor.execute("UPDATE works SET status = 'archive' WHERE work_id = ?", (work_id,))
    conn.commit()
    cursor.execute("SELECT dentist_id, patient_name FROM works WHERE work_id = ?", (work_id,))
    dentist_id, patient_name = cursor.fetchone()
    await bot.send_message(dentist_id, f"–†–∞–±–æ—Ç–∞ –¥–ª—è <b>{patient_name}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ‚úÖ", parse_mode="HTML")
    await callback_query.message.reply("–†–∞–±–æ—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ó–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
@dp.callback_query_handler(lambda c: c.data.startswith('delay_'))
async def mark_work_delayed(callback_query: types.CallbackQuery):
    work_id = int(callback_query.data.split('_')[1])
    cursor.execute("SELECT dentist_id, patient_name FROM works WHERE work_id = ?", (work_id,))
    dentist_id, patient_name = cursor.fetchone()
    await bot.send_message(dentist_id, f"–†–∞–±–æ—Ç–∞ –¥–ª—è <b>{patient_name}</b> –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. ‚è≥", parse_mode="HTML")
    await callback_query.message.reply("–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–¥–µ—Ä–∂–∫–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)